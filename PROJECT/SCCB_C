`timescale 1ns / 1ps

// 최상위 모듈: SCCB_intf
module SCCB_intf (
    input  logic clk,
    input  logic reset,
    output logic SCL,
    inout  wire  SDA // 중요: inout wire로 변경
);
    wire I2C_clk_400khz;
    wire I2C_clk_en;

    wire [7:0] rom_sccb_address_out; // ROM을 위한 주소
    wire [15:0] dataRom_out;         // ROM으로부터의 데이터 (기록할 reg_addr, 기록할 data)

    // SDA tri-state 버퍼를 위한 SCCB_controlUnit의 신호들
    logic sda_out_from_control_unit;
    logic sda_oen_from_control_unit;

    // SDA를 위한 Tri-state 버퍼
    assign SDA = sda_oen_from_control_unit ? sda_out_from_control_unit : 1'bz;

    I2C_clk_gen U_I2C_clk_gen (
        .clk           (clk),
        .reset         (reset),
        .I2C_clk_en    (I2C_clk_en),
        .I2C_clk_400khz(I2C_clk_400khz)
    );

    SCCB_controlUnit U_SCCB_controlUnit (
        .clk              (clk),
        .reset            (reset),
        .I2C_clk_400khz   (I2C_clk_400khz), // I2C_clk_gen으로부터의 인에이블 펄스
        .dataFromRom      (dataRom_out),      // ROM으로부터의 전체 16비트 값
        .SCL              (SCL),
        .sda_out          (sda_out_from_control_unit), // ControlUnit이 이 신호를 구동
        .sda_oen          (sda_oen_from_control_unit), // ControlUnit이 출력 인에이블
        .sda_in           (SDA),                       // ControlUnit이 ACK를 위해 이 신호를 읽음
        .I2C_clk_en       (I2C_clk_en),          // 400kHz 클럭 인에이블/디스에이블
        .rom_addr_out     (rom_sccb_address_out) // ROM 항목 선택
    );

    OV7670_config_rom U_OV7670_config_rom (
        .clk  (clk),
        .addr (rom_sccb_address_out),
        .dout (dataRom_out)
    );

endmodule

// SCCB_controlUnit: SCCB 프로토콜 상태 머신 처리
module SCCB_controlUnit (
    input  logic        clk,
    input  logic        reset,
    input  logic        I2C_clk_400khz,   // I2C_clk_gen으로부터의 인에이블 펄스
    input  logic [15:0] dataFromRom,      // ROM으로부터의 레지스터 주소 및 데이터
    output logic        SCL,
    output logic        sda_out,          // SDA에 구동할 데이터
    output logic        sda_oen,          // SDA를 위한 출력 인에이블
    input  logic        sda_in,           // SDA로부터 읽은 데이터 (ACK용)
    output logic        I2C_clk_en,
    output logic [ 7:0] rom_addr_out      // 설정 ROM을 위한 주소
);
    // OV7670을 위한 SCCB 장치 ID (쓰기 동작)
    localparam DEVICE_WRITE_ID = 8'h42;

    typedef enum {
        SCL_IDLE,
        SCL_START_SETUP, // SCL low 전에 SDA low
        SCL_START_EXEC,  // SCL low
        SCL_BIT_LOW,     // 비트의 SCL low 단계
        SCL_BIT_LOW_HOLD,
        SCL_BIT_HIGH,    // 비트의 SCL high 단계
        SCL_BIT_HIGH_HOLD,
        SCL_STOP_SETUP,  // SDA high 전에 SCL high
        SCL_STOP_EXEC,   // SDA high
        SCL_POST_STOP
    } scl_e;

    typedef enum {
        SDA_IDLE,
        SDA_INIT_DELAY, // 초기 긴 지연
        SDA_CHECK_ROM,  // 트랜잭션 시작 전 현재 ROM 항목 확인
        SDA_DELAY_STATE,// ROM의 FFF0을 위함
        SDA_START_CONDITION,
        SDA_SEND_DEVICE_ID,
        SDA_SEND_REG_ADDR,
        SDA_SEND_DATA,
        SDA_ACK_PHASE,
        SDA_STOP_CONDITION,
        SDA_DONE // 모든 ROM 항목 처리 완료
    } sda_e;

    // 초기 지연 카운터 (예: 100MHz 클럭에서 100ms)
    logic [26:0] init_delay_count; // 100,000,000 사이클용
    logic start_transactions;      // 초기 지연 후 high

    // FFF0 항목을 위한 지연 카운터 (예: 1ms)
    localparam ROM_DELAY_CYCLES = 100_000; // 필요에 따라 조정 (100MHz에서 1ms)
    logic [$clog2(ROM_DELAY_CYCLES):0] rom_delay_count;


    always_ff @( posedge clk or posedge reset ) begin
        if (reset) begin
            init_delay_count <= 0;
            start_transactions <= 1'b0;
        end else begin
            if (!start_transactions) begin
                if (init_delay_count == 27'd100_000_000 - 1) begin // 100MHz에서 약 1초
                    init_delay_count <= 0; // 여기서는 사용되지 않지만 재사용 가능성을 위해 리셋
                    start_transactions <= 1'b1;
                end else begin
                    init_delay_count <= init_delay_count + 1;
                    start_transactions <= 1'b0;
                end
            end
        end
    end

    scl_e scl_state, scl_state_next;
    sda_e sda_state, sda_state_next;

    logic [3:0] bit_count; // 바이트 전송 내 비트 카운트 (0-7 데이터, 8 ACK)
    logic [7:0] current_byte_to_send;
    logic       ack_received;
    logic       transaction_active; // SCCB 트랜잭션 진행 중임을 나타냄

    // 출력 및 내부 상태를 위한 레지스터
    logic r_scl;
    logic r_sda_out;
    logic r_sda_oen;
    logic r_I2C_clk_en;
    logic [7:0] r_rom_addr;

    assign SCL = r_scl;
    assign sda_out = r_sda_out;
    assign sda_oen = r_sda_oen;
    assign I2C_clk_en = r_I2C_clk_en;
    assign rom_addr_out = r_rom_addr;

    // SCL 상태 머신
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            scl_state    <= SCL_IDLE;
            r_scl        <= 1'b1;
            r_I2C_clk_en <= 1'b0;
        end else begin
            scl_state <= scl_state_next;
            r_scl     <= r_scl; // 기본값: 현재 값 유지
            r_I2C_clk_en <= r_I2C_clk_en; // 기본값

            case (scl_state_next) // 적절한 경우 출력 로직에 다음 상태 사용
                SCL_IDLE: begin
                    r_scl <= 1'b1;
                    if (transaction_active) begin // transaction_active는 SDA FSM에 의해 설정됨
                        r_I2C_clk_en <= 1'b1;
                    end else begin
                        r_I2C_clk_en <= 1'b0;
                    end
                end
                SCL_START_SETUP: begin // SDA는 이미 low
                    r_scl <= 1'b1;
                    r_I2C_clk_en <= 1'b1; // 클럭이 켜져 있는지 확인
                end
                SCL_START_EXEC:  r_scl <= 1'b0;
                SCL_BIT_LOW:     r_scl <= 1'b0;
                SCL_BIT_LOW_HOLD:r_scl <= 1'b0;
                SCL_BIT_HIGH:    r_scl <= 1'b1;
                SCL_BIT_HIGH_HOLD:r_scl <= 1'b1;
                SCL_STOP_SETUP:  r_scl <= 1'b1; // SDA는 여전히 low
                SCL_STOP_EXEC:   r_scl <= 1'b1; // SDA high
                SCL_POST_STOP: begin
                    r_scl <= 1'b1;
                    // I2C_clk_en은 transaction_active가 false가 되면 IDLE에 의해 꺼짐
                end
            endcase
        end
    end
    
    // SCL FSM 조합 로직
    always_comb begin
        scl_state_next = scl_state;
        case(scl_state)
            SCL_IDLE:
                if (sda_state == SDA_START_CONDITION && scl_state == SCL_IDLE) scl_state_next = SCL_START_SETUP;
            SCL_START_SETUP:
                if (I2C_clk_400khz) scl_state_next = SCL_START_EXEC; // SDA 이후 SCL low
            SCL_START_EXEC:
                if (I2C_clk_400khz) scl_state_next = SCL_BIT_LOW;    // 비트를 위한 첫 SCL low 기간
            SCL_BIT_LOW:
                if (I2C_clk_400khz) scl_state_next = SCL_BIT_LOW_HOLD;
            SCL_BIT_LOW_HOLD:
                if (I2C_clk_400khz) scl_state_next = SCL_BIT_HIGH;
            SCL_BIT_HIGH:
                if (I2C_clk_400khz) scl_state_next = SCL_BIT_HIGH_HOLD;
            SCL_BIT_HIGH_HOLD:
                if (I2C_clk_400khz) begin
                    if (sda_state == SDA_STOP_CONDITION) scl_state_next = SCL_STOP_SETUP;
                    else scl_state_next = SCL_BIT_LOW; // 다음 비트
                end
            SCL_STOP_SETUP: // SCL은 이미 high
                if (I2C_clk_400khz) scl_state_next = SCL_STOP_EXEC; // SDA high
            SCL_STOP_EXEC:
                if (I2C_clk_400khz) scl_state_next = SCL_POST_STOP;
            SCL_POST_STOP:
                scl_state_next = SCL_IDLE; // 다음을 위해 준비 또는 유휴 상태 유지
        endcase
    end

    // SDA 상태 머신
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            sda_state    <= SDA_IDLE;
            r_sda_out    <= 1'b1;
            r_sda_oen    <= 1'b1;
            r_rom_addr   <= 8'd0;
            bit_count    <= 4'd0;
            ack_received <= 1'b0;
            transaction_active <= 1'b0;
            rom_delay_count <= 0;
        end else begin
            sda_state    <= sda_state_next;
            r_sda_out    <= r_sda_out; // 기본값: 유지
            r_sda_oen    <= r_sda_oen; // 기본값: 유지
            r_rom_addr   <= r_rom_addr_next;
            bit_count    <= bit_count_next;
            ack_received <= ack_received_next;
            transaction_active <= transaction_active_next;
            rom_delay_count <= rom_delay_count_next;

            // 출력은 명확성을 위해 다음 상태 로직 또는 현재 상태에서 직접 구동됨
            case(sda_state_next)
                SDA_IDLE: begin
                    r_sda_out <= 1'b1;
                    r_sda_oen <= 1'b1;
                end
                SDA_START_CONDITION: begin
                     r_sda_out <= 1'b0; // 시작을 위해 SDA low
                     r_sda_oen <= 1'b1;
                end
                SDA_SEND_DEVICE_ID, SDA_SEND_REG_ADDR, SDA_SEND_DATA: begin
                    if (scl_state == SCL_BIT_LOW && I2C_clk_400khz) begin // SCL low일 때 SDA 변경
                        r_sda_out <= current_byte_to_send[7 - bit_count];
                    end
                    r_sda_oen <= 1'b1;
                end
                SDA_ACK_PHASE: begin
                    r_sda_oen <= 1'b0; // 슬레이브 ACK를 위해 SDA 해제
                    r_sda_out <= 1'b1; // 마스터는 high로 구동 (슬레이브가 ACK하지 않으면 풀업이 high 유지)
                    // ack_received는 sda_in을 기반으로 조합 블록에서 업데이트됨
                end
                SDA_STOP_CONDITION: begin
                    if (scl_state == SCL_STOP_SETUP && I2C_clk_400khz) begin // SCL은 이미 high
                        r_sda_out <= 1'b0; // SCL_STOP_SETUP 동안 SDA low 유지
                    end else if (scl_state == SCL_STOP_EXEC && I2C_clk_400khz) begin // SCL high
                        r_sda_out <= 1'b1; // 정지를 위해 SDA high
                    end
                    r_sda_oen <= 1'b1;
                end
                default: begin
                    // r_sda_oen은 대부분의 다른 상태에서 1'b1로 유지될 수 있음
                end
            endcase
        end
    end

    // SDA FSM 조합 로직
    always_comb begin
        sda_state_next = sda_state;
        r_rom_addr_next = r_rom_addr;
        bit_count_next = bit_count;
        ack_received_next = ack_received;
        transaction_active_next = transaction_active;
        current_byte_to_send = 8'b0; // 기본값
        rom_delay_count_next = rom_delay_count;

        case (sda_state)
            SDA_IDLE: begin
                transaction_active_next = 1'b0;
                if (start_transactions) begin // 초기 지연 통과
                    sda_state_next = SDA_CHECK_ROM;
                end
            end
            SDA_CHECK_ROM: begin // 현재 ROM 항목 확인
                transaction_active_next = 1'b0; // 아직 활성 아님, 확인 중
                if (dataFromRom == 16'hFFFF) begin // ROM 끝
                    sda_state_next = SDA_DONE;
                end else if (dataFromRom == 16'hFFF0) begin // 지연 명령
                    sda_state_next = SDA_DELAY_STATE;
                    rom_delay_count_next = 0;
                end else begin // 유효한 데이터, 트랜잭션 시작
                    transaction_active_next = 1'b1; // SCL FSM에 I2C 클럭 인에이블 신호
                    sda_state_next = SDA_START_CONDITION;
                end
            end
            SDA_DELAY_STATE: begin
                transaction_active_next = 1'b0;
                if (rom_delay_count == ROM_DELAY_CYCLES -1) begin
                    r_rom_addr_next = r_rom_addr + 1; // 다음 ROM 항목으로 이동
                    sda_state_next = SDA_CHECK_ROM;   // 새 항목 다시 확인
                end else begin
                    rom_delay_count_next = rom_delay_count + 1;
                end
            end
            SDA_START_CONDITION: begin
                // SDA는 순차 로직에 의해 low로 당겨짐
                // SCL이 low가 될 때까지 대기 (SCL_START_EXEC 상태)
                if (scl_state == SCL_START_EXEC && I2C_clk_400khz) begin
                    sda_state_next = SDA_SEND_DEVICE_ID;
                    current_byte_to_send = DEVICE_WRITE_ID;
                    bit_count_next = 0;
                end
            end
            SDA_SEND_DEVICE_ID: begin
                current_byte_to_send = DEVICE_WRITE_ID;
                // SDA 데이터 비트는 SCL low일 때 순차 로직에서 설정됨
                if (scl_state == SCL_BIT_HIGH_HOLD && I2C_clk_400khz) begin // 비트 전송됨, SCL high였음
                    if (bit_count == 7) begin // 마지막 데이터 비트 전송됨
                        sda_state_next = SDA_ACK_PHASE;
                        bit_count_next = 0; // 다음 바이트 (또는 ACK 비트 카운트)를 위해 리셋
                    end else begin
                        bit_count_next = bit_count + 1;
                        // 현재 상태 유지, SCL FSM은 SCL_BIT_LOW로 루프
                    end
                end
            end
            SDA_SEND_REG_ADDR: begin
                current_byte_to_send = dataFromRom[15:8]; // MSB는 reg_addr
                if (scl_state == SCL_BIT_HIGH_HOLD && I2C_clk_400khz) begin
                    if (bit_count == 7) begin
                        sda_state_next = SDA_ACK_PHASE;
                        bit_count_next = 0;
                    end else {
                        bit_count_next = bit_count + 1;
                    }
                end
            end
            SDA_SEND_DATA: begin
                current_byte_to_send = dataFromRom[7:0]; // LSB는 data
                if (scl_state == SCL_BIT_HIGH_HOLD && I2C_clk_400khz) begin
                    if (bit_count == 7) begin
                        sda_state_next = SDA_ACK_PHASE;
                        bit_count_next = 0;
                    end else {
                        bit_count_next = bit_count + 1;
                    }
                end
            end
            SDA_ACK_PHASE: begin
                // SDA oen은 low. 마스터는 SCL high일 때 SDA 샘플링.
                if (scl_state == SCL_BIT_HIGH_HOLD && I2C_clk_400khz) begin // ACK를 위해 SCL high였음
                    ack_received_next = ~sda_in; // 액티브 로우 ACK
                    // ACK 이전에 어떤 바이트가 ACK되었는지 알아야 함.
                    // 단순화: DEVICE_ID -> REG_ADDR -> DATA 순서로 고정된 시퀀스를 가정
                    // 이 부분은 세심한 시퀀싱 필요. 다음은 단순화된 예시:
                    // ack_received_next가 참이든 거짓이든 진행 (이 예제의 단순화를 위해 NACK도 진행)
                    // 실제 구현에서는 NACK를 처리해야 함
                    if (ack_received_next || !ack_received_next) begin
                        // 어떤 바이트의 ACK인지에 따라 다음 상태 결정
                        // 현재 current_byte_to_send 값에 따라 분기 (이것은 조합 로직에서 current_byte_to_send가 현재 상태에 의존하기 때문에 까다로울 수 있음)
                        // 이상적으로는 각 ACK에 대해 별도의 상태를 사용하거나 이전 상태를 추적해야 함.
                        // 현재는 단순화를 위해, 직전 상태를 암시적으로 가정함.
                        if (sda_state_next == SDA_SEND_REG_ADDR && current_byte_to_send == DEVICE_WRITE_ID) { // DEVICE_ID의 ACK였다고 가정
                            // 이 조건은 논리적으로 current_byte_to_send가 SDA_SEND_DEVICE_ID 상태에서 설정되었어야 함을 의미
                            // 실제로는 이전 상태를 명시적으로 저장하거나, 각 ACK마다 다른 상태를 가져야 함.
                            // 여기서는 편의상 이렇게 가정함.
                            sda_state_next = SDA_SEND_REG_ADDR;
                            // current_byte_to_send는 SDA_SEND_REG_ADDR 상태에서 dataFromRom[15:8]로 설정될 것임
                            bit_count_next = 0;
                        } else if (sda_state_next == SDA_SEND_DATA && current_byte_to_send == dataFromRom[15:8]) { // REG_ADDR의 ACK였다고 가정
                            sda_state_next = SDA_SEND_DATA;
                            // current_byte_to_send는 SDA_SEND_DATA 상태에서 dataFromRom[7:0]로 설정될 것임
                            bit_count_next = 0;
                        } else { // DATA의 ACK였다고 가정 (current_byte_to_send == dataFromRom[7:0])
                            sda_state_next = SDA_STOP_CONDITION;
                        }
                    }
                end
            end
            SDA_STOP_CONDITION: begin
                // SDA는 SCL_STOP_SETUP/EXEC에 따라 순차 로직에서 처리됨
                if (scl_state == SCL_POST_STOP) begin // SCL FSM이 STOP 완료됨을 나타냄
                    r_rom_addr_next = r_rom_addr + 1; // 다음 ROM 항목으로 이동
                    transaction_active_next = 1'b0;   // 트랜잭션 완료
                    sda_state_next = SDA_CHECK_ROM;   // 새 ROM 항목 확인
                end
            end
            SDA_DONE: begin
                transaction_active_next = 1'b0;
                // DONE 상태 유지. 시스템 설정 완료.
            end
        endcase
    end

endmodule

// I2C_clk_gen: 400kHz 인에이블 펄스 생성
module I2C_clk_gen (
    input  logic clk, // 시스템 클럭 (예: 100MHz)
    input  logic reset,
    input  logic I2C_clk_en,     // SCCB_controlUnit으로부터의 인에이블 신호
    output logic I2C_clk_400khz  // 펄스형 출력
);
    // 100MHz 클럭에서 400kHz 주기(2.5us)를 얻기 위해: 100MHz / 400kHz = 250
    // 250 사이클마다 펄스 필요.
    localparam COUNT_MAX = 250 -1; // 하나의 400kHz 주기를 위한 시스템 클럭 사이클
    logic [$clog2(COUNT_MAX):0] counter;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            I2C_clk_400khz <= 1'b0;
            counter        <= 0;
        end else begin
            if (I2C_clk_en) begin
                if (counter == COUNT_MAX) begin
                    I2C_clk_400khz <= 1'b1;
                    counter        <= 0;
                end else begin
                    I2C_clk_400khz <= 1'b0;
                    counter        <= counter + 1;
                end
            end else begin
                I2C_clk_400khz <= 1'b0;
                counter        <= 0; // 비활성화 시 카운터 리셋
            end
        end
    end
endmodule

// OV7670_config_rom: 설정 ROM 데이터
module OV7670_config_rom (
    input logic clk, // clk는 조합 ROM에 엄밀히 필요하지는 않지만 종종 존재
    input logic [7:0] addr,
    output logic [15:0] dout
);
    //FFFF는 ROM 끝, FFF0은 지연
    // ROM을 위한 case 문 사용 (LUT 또는 블록 RAM으로 합성됨)
    always_comb begin // 조합 읽기
        case (addr)
            0:  dout = 16'h12_80;  // 리셋
            1:  dout = 16'hFF_F0;  // 지연 명령
            2:  dout = 16'h12_14;  // COM7, RGB 컬러 출력 설정 및 QVGA 설정
            3:  dout = 16'h11_80;  // CLKRC, 내부 PLL이 입력 클럭과 일치
            // ... (나머지 ROM 데이터) ...
            4:  dout = 16'h0C_04;  // COM3, 기본 설정
            5:  dout = 16'h3E_19;  // COM14, 스케일링 없음, 일반 pclock
            6:  dout = 16'h04_00;  // COM1, CCIR656 비활성화
            7:  dout = 16'h40_d0;  // COM15, RGB565, 전체 출력 범위
            8:  dout = 16'h3a_04;  // TSLB       
            9:  dout = 16'h14_18;  // COM9, MAX AGC 값 x4
            10: dout = 16'h4F_B3;  // MTX1       
            11: dout = 16'h50_B3;  // MTX2
            12: dout = 16'h51_00;  // MTX3
            13: dout = 16'h52_3d;  // MTX4
            14: dout = 16'h53_A7;  // MTX5
            15: dout = 16'h54_E4;  // MTX6
            16: dout = 16'h58_9E;  // MTXS
            17: dout = 16'h3D_C0;  // COM13, 감마 인에이블 설정, 예약 비트 보존 안 함, 틀릴 수 있음?
            18: dout = 16'h17_15;  // HSTART, 시작 상위 8비트 
            19: dout = 16'h18_03;  // HSTOP, 정지 상위 8비트 // 이상한 색상 라인 제거
            20: dout = 16'h32_00;  // HREF, 에지 오프셋
            21: dout = 16'h19_03;  // VSTART, 시작 상위 8비트
            22: dout = 16'h1A_7B;  // VSTOP, 정지 상위 8비트
            23: dout = 16'h03_00;  // VREF, vsync 에지 오프셋
            24: dout = 16'h0F_41;  // COM6, 타이밍 리셋
            25: dout = 16'h1E_00;  // MVFP, 미러/플립 비활성화 // 03의 매직 값일 수 있음
            26: dout = 16'h33_0B;  // CHLF, // 인터넷에서 찾은 매직 값
            27: dout = 16'h3C_78;  // COM12, VSYNC low일 때 HREF 없음
            28: dout = 16'h69_00;  // GFIX, 게인 제어 수정
            29: dout = 16'h74_00;  // REG74, 디지털 게인 제어
            30: dout = 16'hB0_84;  // RSVD, 좋은 색상을 위해 *필수적인* 인터넷 매직 값
            31: dout = 16'hB1_0c;  // ABLC1
            32: dout = 16'hB2_0e;  // RSVD, 더 많은 인터넷 매직 값
            33: dout = 16'hB3_80;  // THL_ST
            // 미스터리 스케일링 숫자 시작
            34: dout = 16'h70_3a;
            35: dout = 16'h71_35;
            36: dout = 16'h72_11;
            37: dout = 16'h73_f1;
            38: dout = 16'ha2_02;
            // 감마 곡선 값
            39: dout = 16'h7a_20;
            40: dout = 16'h7b_10;
            41: dout = 16'h7c_1e;
            42: dout = 16'h7d_35;
            43: dout = 16'h7e_5a;
            44: dout = 16'h7f_69;
            45: dout = 16'h80_76;
            46: dout = 16'h81_80;
            47: dout = 16'h82_88;
            48: dout = 16'h83_8f;
            49: dout = 16'h84_96;
            50: dout = 16'h85_a3;
            51: dout = 16'h86_af;
            52: dout = 16'h87_c4;
            53: dout = 16'h88_d7;
            54: dout = 16'h89_e8;
            // AGC 및 AEC
            55: dout = 16'h13_e0;  // COM8, AGC / AEC 비활성화
            56: dout = 16'h00_00;  // AGC를 위해 게인 레지스터 0으로 설정
            57: dout = 16'h10_00;  // ARCJ 레지스터 0으로 설정
            58: dout = 16'h0d_40;  // COM4를 위한 매직 예약 비트
            59: dout = 16'h14_18;  // COM9, 4x 게인 + 매직 비트
            60: dout = 16'ha5_05;  // BD50MAX
            61: dout = 16'hab_07;  // DB60MAX
            62: dout = 16'h24_95;  // AGC 상한
            63: dout = 16'h25_33;  // AGC 하한
            64: dout = 16'h26_e3;  // AGC/AEC 빠른 모드 동작 영역
            65: dout = 16'h9f_78;  // HAECC1
            66: dout = 16'ha0_68;  // HAECC2
            67: dout = 16'ha1_03;  // 매직
            68: dout = 16'ha6_d8;  // HAECC3
            69: dout = 16'ha7_d8;  // HAECC4
            70: dout = 16'ha8_f0;  // HAECC5
            71: dout = 16'ha9_90;  // HAECC6
            72: dout = 16'haa_94;  // HAECC7
            73: dout = 16'h13_e7;  // COM8, AGC / AEC 활성화
            74: dout = 16'h69_07;
            default: dout = 16'hFF_FF;  // ROM 끝 표시 (주소 75 이상 포함)
        endcase
    end
endmodule
